import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import anthropic
import json
from datetime import datetime
from enum import Enum
import base64
import io
import asyncio
import requests
import traceback

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
ANTHROPIC_API_KEY = os.environ.get('ANTHROPIC_API_KEY')

# ========== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø N8N ==========
# URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ n8n
N8N_WEBHOOK = "https://noboring.app.n8n.cloud/webhook-test/telegram-errors"

def report_error(error_description):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ n8n –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GitHub Issue"""
    try:
        requests.post(N8N_WEBHOOK, json={"text": error_description}, timeout=5)
        print(f"‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ n8n")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ n8n: {e}")
# ====================================

import httpx

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —è–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª—é—á)
if ANTHROPIC_API_KEY:
    client = anthropic.Anthropic(
        api_key=ANTHROPIC_API_KEY,
        max_retries=2,
        timeout=httpx.Timeout(60.0, connect=10.0)
    )
else:
    client = None

DEFAULT_MODEL = os.environ.get("ANTHROPIC_MODEL", "claude-3-5-sonnet-20241022")

class SessionState(Enum):
    WAITING_TASK = "waiting_task"
    SOLVING = "solving"
    FINAL_ANSWER = "final_answer"
    CHECKING = "checking"
    COMPLETED = "completed"
    EXAM_MODE = "exam_mode"

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –°–æ–∫—Ä–∞—Ç–æ–≤—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
SYSTEM_PROMPT = """–¢—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –°–æ–∫—Ä–∞—Ç–æ–≤—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è.

–ü–†–ê–í–ò–õ–ê:
1. –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞—á–∏
2. –í–µ–¥–∏ —É—á–µ–Ω–∏–∫–∞ –∫ —Ä–µ—à–µ–Ω–∏—é —á–µ—Ä–µ–∑ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
3. –†–∞–∑–±–∏–≤–∞–π —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏
4. –û—Ü–µ–Ω–∏–≤–∞–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ –æ—Ç–≤–µ—Ç–∞–º —É—á–µ–Ω–∏–∫–∞
5. –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞
6. –•–≤–∞–ª–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —à–∞–≥–∏ –∏ –º—ã—à–ª–µ–Ω–∏–µ
7. –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –∑–∞—Å—Ç—Ä—è–ª - –¥–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–æ –Ω–µ —Ä–µ—à–µ–Ω–∏–µ
8. –ü—Ä–æ–≤–µ—Ä—è–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

–°–¢–†–ê–¢–ï–ì–ò–Ø:
- –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —É—á–µ–Ω–∏–∫ –ø–æ–Ω–∏–º–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏
- –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä—å, –∑–Ω–∞–µ—Ç –ª–∏ —É—á–µ–Ω–∏–∫ —ç—Ç–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
- –í–µ–¥–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–∏–µ —à–∞–≥–∏ –∫ —Ä–µ—à–µ–Ω–∏—é
- –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ

–°–¢–ò–õ–¨:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π
- –ó–∞–¥–∞–≤–∞–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑
- –ò—Å–ø–æ–ª—å–∑—É–π emoji –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—É–º–µ—Ä–µ–Ω–Ω–æ)
- –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –ø—Ä–æ—Å–∏—Ç –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç, –æ–±—ä—è—Å–Ω–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."""

VERIFICATION_PROMPT = """–¢—ã –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.

–ó–ê–î–ê–ß–ê: {original_task}

–û–¢–í–ï–¢ –£–ß–ï–ù–ò–ö–ê: {student_answer}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
2. –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è (–ª–æ–≥–∏–∫–∞, —à–∞–≥–∏, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
3. –£–∫–∞–∂–∏ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
4. –î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{{
  "correct": true/false,
  "final_answer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
  "score": 0-100,
  "feedback": "–¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
  "mistakes": ["—Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å"],
  "strengths": ["—á—Ç–æ —É—á–µ–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Ö–æ—Ä–æ—à–æ"]
}}"""

MEME_GENERATION_PROMPT = """–°–æ–∑–¥–∞–π –≤–µ—Å–µ–ª—ã–π –º–µ–º-—Ç–µ–∫—Å—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–µ—à–∏–ª –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É.

–ö–û–ù–¢–ï–ö–°–¢:
- –û—Ü–µ–Ω–∫–∞: {score}/100
- –ó–∞–¥–∞—á–∞ –±—ã–ª–∞: {task_type}
- –£—Ä–æ–≤–µ–Ω—å: {difficulty}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ú–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º (2024-2025)
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–µ–º–æ–≤ (–Ω–æ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫)
3. –°–≤—è–∑–∞–Ω —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –∏ —É—á–µ–±–æ–π
4. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π
5. –ü–æ–Ω—è—Ç–µ–Ω –ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
6. –ù–µ –¥–ª–∏–Ω–Ω–µ–µ 2-3 —Å—Ç—Ä–æ–∫
7. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫—É–ª—å—Ç—É—Ä—É

–°–¢–ò–õ–¨ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ü–µ–Ω–∫–∏:
- 80-100: –≠–ø–∏—á–Ω–∞—è –ø–æ–±–µ–¥–∞, "based", "gigachad energy"
- 60-79: –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, "respectable", "W"
- 40-59: –ü–æ–¥–¥–µ—Ä–∂–∫–∞, "we take those", "small wins"
- 0-39: –ú–æ—Ç–∏–≤–∞—Ü–∏—è, "character development", "learning arc"

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –º–µ–º–∞, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
MATH_SYMBOLS = {
    'basic': ['‚àö', '¬≤', '¬≥', '‚à´', 'œÄ', '¬±', '√∑', '√ó'],
    'greek': ['Œ±', 'Œ≤', 'Œ≥', 'Œ¥', 'Œ∏', 'Œª', 'Œº', 'œÉ'],
    'calculus': ['‚àë', '‚àè', '‚àÇ', '‚àá', '‚àû', '‚âà', '‚â†', '‚â§', '‚â•'],
    'geometry': ['‚à†', '¬∞', '‚ä•', '‚à•', '‚ñ≥', '‚ñ°', '‚óã']
}

class UserSession:
    def __init__(self, user_id):
        self.user_id = user_id
        self.state = SessionState.WAITING_TASK
        self.current_task = None
        self.conversation = []
        self.stats = {
            "total_tasks": 0,
            "completed_tasks": 0,
            "average_score": 0,
            "total_hints": 0,
            "tasks_history": [],
            "total_memes_earned": 0
        }
        self.difficulty = "medium"
        self.exam_mode = False
        self.task_start_time = None
        self.temp_task = None
        self.meme_enabled = True

user_sessions = {}

def get_session(user_id):
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id)
    return user_sessions[user_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        session = get_session(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üìö –ù–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å", callback_data="start_solving")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.\n\n"
            "üéØ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ "
            "—á–µ—Ä–µ–∑ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–Ω–∏–º–∞–Ω–∏—è\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å\n"
            "‚Ä¢ –†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "‚Ä¢ üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å —Ñ–æ—Ç–æ!\n"
            "‚Ä¢ üé≠ –í–µ—Å–µ–ª—ã–µ –º–µ–º—ã –∑–∞ —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏!\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        error_text = f"""–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:

**–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:** {str(e)}

**User ID:** {update.effective_user.id}
**Username:** @{update.effective_user.username if update.effective_user.username else 'No username'}

**–¢—Ä–µ–π—Å–±–µ–∫:**
```
{traceback.format_exc()}
```"""
        report_error(error_text)
        await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    session = get_session(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    data = query.data
    
    if data.startswith('cat_'):
        category = data.replace('cat_', '')
        symbols = MATH_SYMBOLS.get(category, [])
        
        keyboard = []
        row = []
        for i, symbol in enumerate(symbols):
            row.append(InlineKeyboardButton(symbol, callback_data=f'sym_{symbol}'))
            if len(row) == 4 or i == len(symbols) - 1:
                keyboard.append(row)
                row = []
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f'–°–∏–º–≤–æ–ª—ã ({category}):', reply_markup=reply_markup)
        return
    
    elif data.startswith('sym_'):
        symbol = data.replace('sym_', '')
        await query.edit_message_text(f'–°–∫–æ–ø–∏—Ä—É–π —Å–∏–º–≤–æ–ª: {symbol}')
        return
    
    elif data == 'back_menu':
        keyboard = [
            [InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–µ", callback_data='cat_basic'),
             InlineKeyboardButton("–ì—Ä–µ—á–µ—Å–∫–∏–µ", callback_data='cat_greek')],
            [InlineKeyboardButton("–ú–∞—Ç–∞–Ω–∞–ª–∏–∑", callback_data='cat_calculus'),
             InlineKeyboardButton("–ì–µ–æ–º–µ—Ç—Ä–∏—è", callback_data='cat_geometry')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if query.data == "start_solving":
        session.state = SessionState.WAITING_TASK
        await query.edit_message_text(
            "üìù –û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É:\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º\n"
            "üì∏ –ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 3x + 7 = 22\n"
            "‚Ä¢ –ù–∞–π–¥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é: f(x) = x¬≤ + 3x - 5\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏: (2x + 3)(x - 4)"
        )
    
    elif query.data == "show_stats":
        await show_statistics(query, session)
    
    elif query.data == "settings":
        await show_settings(query, session)
    
    elif query.data == "help":
        await show_help(query)
    
    elif query.data.startswith("difficulty_"):
        difficulty = query.data.replace("difficulty_", "")
        session.difficulty = difficulty
        await query.edit_message_text(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {difficulty}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞—á–∞–ª–∞!"
        )
    
    elif query.data == "toggle_exam":
        session.exam_mode = not session.exam_mode
        mode = "–≤–∫–ª—é—á–µ–Ω" if session.exam_mode else "–≤—ã–∫–ª—é—á–µ–Ω"
        await query.edit_message_text(
            f"üéì –†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ {mode}\n\n"
            f"{'–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã' if session.exam_mode else '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø–æ–ª–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏'}"
        )
    
    elif query.data == "toggle_memes":
        session.meme_enabled = not session.meme_enabled
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if session.meme_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await query.edit_message_text(
            f"üé≠ –ú–µ–º—ã {status}\n\n"
            f"{'–ë—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤–µ—Å–µ–ª—ã–µ –º–µ–º—ã –∑–∞ —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏!' if session.meme_enabled else '–ú–µ–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã. –°–µ—Ä—å–µ–∑–Ω—ã–π —Ä–µ–∂–∏–º.'}"
        )
    
    elif query.data == "submit_answer":
        session.state = SessionState.FINAL_ANSWER
        await query.edit_message_text(
            "‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –Ω–∞ –∑–∞–¥–∞—á—É.\n\n"
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º."
        )
    
    elif query.data == "confirm_task":
        if hasattr(session, 'temp_task'):
            task_text = session.temp_task
            delattr(session, 'temp_task')
            
            session.current_task = task_text
            session.conversation = []
            session.state = SessionState.SOLVING
            session.task_start_time = datetime.now()
            session.stats["total_tasks"] += 1
            
            session.conversation.append({
                "role": "user",
                "content": f"–£—á–µ–Ω–∏–∫ —Ö–æ—á–µ—Ç —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É: {task_text}\n\n–ù–∞—á–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á–∏."
            })
            
            response = await get_ai_response(session, SYSTEM_PROMPT)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–¥–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="submit_answer")],
                [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint")],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_solving")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—à–∞—Ç—å!\n\n{response}",
                reply_markup=reply_markup
            )
    
    elif query.data == "edit_task":
        await query.edit_message_text(
            "‚úèÔ∏è –•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é."
        )
        session.state = SessionState.WAITING_TASK
    
    elif query.data == "retry_photo":
        await query.edit_message_text(
            "üì∏ –•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏."
        )
        session.state = SessionState.WAITING_TASK
    
    elif query.data == "hint":
        if session.state != SessionState.SOLVING:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á—É!", show_alert=True)
            return
        
        session.stats["total_hints"] += 1
        
        session.conversation.append({
            "role": "user",
            "content": "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞. –î–∞–π –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–æ –Ω–µ —Ä–µ—à–µ–Ω–∏–µ."
        })
        
        response = await get_ai_response(session, SYSTEM_PROMPT)
        
        await query.message.reply_text(f"üí° {response}")

async def show_statistics(query, session):
    text = build_statistics_text(session)
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_solving")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_settings(query, session):
    difficulty_emoji = {
        "easy": "üü¢ –õ–µ–≥–∫–∏–π",
        "medium": "üü° –°—Ä–µ–¥–Ω–∏–π",
        "hard": "üî¥ –°–ª–æ–∂–Ω—ã–π"
    }
    
    keyboard = [
        [InlineKeyboardButton(f"–£—Ä–æ–≤–µ–Ω—å: {difficulty_emoji[session.difficulty]}", callback_data="diff_menu")],
        [InlineKeyboardButton(
            f"üéì –†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞: {'‚úÖ –í–∫–ª' if session.exam_mode else '‚ùå –í—ã–∫–ª'}", 
            callback_data="toggle_exam"
        )],
        [InlineKeyboardButton(
            f"üé≠ –ú–µ–º—ã: {'‚úÖ –í–∫–ª' if session.meme_enabled else '‚ùå –í—ã–∫–ª'}", 
            callback_data="toggle_memes"
        )],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_solving")]
    ]
    
    await query.edit_message_text(
        "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_help(query):
    text = """‚ùì –°–ü–†–ê–í–ö–ê

üéØ –ö–ê–ö –Ø –†–ê–ë–û–¢–ê–Æ:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É:
   ‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–º
   üì∏ –§–æ—Ç–æ (—è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç!)
2Ô∏è‚É£ –Ø –∑–∞–¥–∞–º –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
3Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π –∏ –¥–≤–∏–≥–∞–π—Å—è –∫ —Ä–µ—à–µ–Ω–∏—é
4Ô∏è‚É£ –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ "–°–¥–∞—Ç—å –æ—Ç–≤–µ—Ç"
5Ô∏è‚É£ –Ø –ø—Ä–æ–≤–µ—Ä—é —Ç–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –¥–∞–º –æ—Ü–µ–Ω–∫—É

üì∏ –§–û–¢–û –ó–ê–î–ê–ß:
–ú–æ–∂–µ—à—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —É—á–µ–±–Ω–∏–∫–∞,
—Ç–µ—Ç—Ä–∞–¥–∏ –∏–ª–∏ —Å –¥–æ—Å–∫–∏ - —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç!

üìù –ö–û–ú–ê–ù–î–´:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/reset - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/hint - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
/submit - —Å–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/keyboard - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã

üéì –†–ï–ñ–ò–ú –≠–ö–ó–ê–ú–ï–ù–ê:
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
–¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π

üí™ –ß–µ–º –±–æ–ª—å—à–µ —Ä–µ—à–∞–µ—à—å —Å–∞–º - 
—Ç–µ–º –ª—É—á—à–µ —É—á–∏—à—å—Å—è!"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_solving")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def keyboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–µ", callback_data='cat_basic'),
         InlineKeyboardButton("–ì—Ä–µ—á–µ—Å–∫–∏–µ", callback_data='cat_greek')],
        [InlineKeyboardButton("–ú–∞—Ç–∞–Ω–∞–ª–∏–∑", callback_data='cat_calculus'),
         InlineKeyboardButton("–ì–µ–æ–º–µ—Ç—Ä–∏—è", callback_data='cat_geometry')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–∏–º–≤–æ–ª–æ–≤:', reply_markup=reply_markup)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        session = get_session(user_id)
        
        if session.state not in [SessionState.WAITING_TASK, SessionState.SOLVING]:
            await update.message.reply_text(
                "‚ùå –°–µ–π—á–∞—Å —è –Ω–µ –∂–¥—É —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π /reset —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
            )
            return
        
        await update.message.reply_text("üì∏ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ! –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏...")
        await update.message.chat.send_action("typing")
        
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        
        photo_bytes = io.BytesIO()
        await photo_file.download_to_memory(photo_bytes)
        photo_bytes.seek(0)
        
        image_data = base64.standard_b64encode(photo_bytes.read()).decode("utf-8")
        
        recognized_text = await recognize_math_from_image(image_data)
        
        if not recognized_text:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Ñ–æ—Ç–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π:\n"
                "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                "‚Ä¢ –î–µ—Ä–∂–∞—Ç—å –∫–∞–º–µ—Ä—É —Ä–æ–≤–Ω–æ\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–∏–π\n\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º."
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω–æ, —Ä–µ—à–∞–µ–º!", callback_data="confirm_task")],
            [InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_task")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="retry_photo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        session.temp_task = recognized_text
        
        await update.message.reply_text(
            f"üìù –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É:\n\n"
            f"<code>{recognized_text}</code>\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        error_text = f"""–û—à–∏–±–∫–∞ –≤ handle_photo:

**–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:** {str(e)}

**User ID:** {update.effective_user.id}
**Username:** @{update.effective_user.username if update.effective_user.username else 'No username'}

**–¢—Ä–µ–π—Å–±–µ–∫:**
```
{traceback.format_exc()}
```"""
        report_error(error_text)
        
        await update.message.reply_text(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º."
        )

async def recognize_math_from_image(image_base64):
    if not client:
        return None

    try:
        def _request():
            return client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=1024,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image",
                                "source": {
                                    "type": "base64",
                                    "media_type": "image/jpeg",
                                    "data": image_base64,
                                },
                            },
                            {
                                "type": "text",
                                "text": """–†–∞—Å–ø–æ–∑–Ω–∞–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ò–∑–≤–ª–µ–∫–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (—É—Å–ª–æ–≤–∏–µ, –≤–æ–ø—Ä–æ—Å)
2. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ñ–æ—Ä–º—É–ª—ã, —É—Ä–∞–≤–Ω–µ–Ω–∏—è
3. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á - –∏–∑–≤–ª–µ–∫–∏ –≤—Å–µ
4. –ï—Å–ª–∏ —ç—Ç–æ —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ—á–Ω–æ
5. –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ - –Ω–∞–ø–∏—à–∏ "–ù–ï–¢ –ó–ê–î–ê–ß–ò"

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
- –†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 15
- –ù–∞–π–¥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = x¬≥ - 2x + 1
- –£–ø—Ä–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: (a + b)¬≤ - (a - b)¬≤"""
                        }
                    ],
                }
            ],
            )

        message = await asyncio.to_thread(_request)

        recognized_text = message.content[0].text.strip()
        
        if "–ù–ï–¢ –ó–ê–î–ê–ß–ò" in recognized_text.upper():
            return None
            
        return recognized_text
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_message = update.message.text
        session = get_session(user_id)
        
        if session.state == SessionState.WAITING_TASK:
            session.current_task = user_message
            session.conversation = []
            session.state = SessionState.SOLVING
            session.task_start_time = datetime.now()
            session.stats["total_tasks"] += 1
            
            session.conversation.append({
                "role": "user",
                "content": f"–£—á–µ–Ω–∏–∫ —Ö–æ—á–µ—Ç —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É: {user_message}\n\n–ù–∞—á–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á–∏."
            })
            
            await update.message.chat.send_action("typing")
            
            response = await get_ai_response(session, SYSTEM_PROMPT)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–¥–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="submit_answer")],
                [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint")],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_solving")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üìù –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n{response}",
                reply_markup=reply_markup
            )
            return
        
        if session.state == SessionState.SOLVING:
            session.conversation.append({
                "role": "user",
                "content": user_message
            })
            
            await update.message.chat.send_action("typing")
            
            response = await get_ai_response(session, SYSTEM_PROMPT)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–¥–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="submit_answer")],
                [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, reply_markup=reply_markup)
            return
        
        if session.state == SessionState.FINAL_ANSWER:
            await update.message.chat.send_action("typing")
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
            
            verification = await verify_solution(session.current_task, user_message)
            
            task_time = (datetime.now() - session.task_start_time).seconds // 60
            session.stats["completed_tasks"] += 1
            
            old_avg = session.stats["average_score"]
            new_score = verification["score"]
            total = session.stats["completed_tasks"]
            session.stats["average_score"] = (old_avg * (total - 1) + new_score) / total
            
            session.stats["tasks_history"].append({
                "date": datetime.now().strftime("%d.%m"),
                "score": new_score,
                "time": task_time,
                "task_preview": session.current_task[:30] + "..." if len(session.current_task) > 30 else session.current_task
            })
            
            await update.message.chat.send_action("typing")
            meme_text = await generate_meme_text(new_score, session.current_task, session.difficulty)
            
            emoji = "üéâ" if new_score >= 80 else "üëç" if new_score >= 60 else "üí™"
            result_text = f"""{emoji} –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê

üìù –ó–∞–¥–∞—á–∞: {session.current_task[:50]}...

‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {"–í–µ—Ä–Ω–æ!" if verification['correct'] else "–ï—Å—Ç—å –æ—à–∏–±–∫–∏"}
‚≠ê –û—Ü–µ–Ω–∫–∞: {new_score}/100
‚è± –í—Ä–µ–º—è: {task_time} –º–∏–Ω

üìä –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨:
{verification['feedback']}

"""
            
            if verification.get('strengths'):
                result_text += "üí™ –ß–¢–û –•–û–†–û–®–û:\n"
                for s in verification['strengths']:
                    result_text += f"‚Ä¢ {s}\n"
                result_text += "\n"
            
            if verification.get('mistakes'):
                result_text += "‚ö†Ô∏è –ù–ê–î –ß–ï–ú –ü–û–†–ê–ë–û–¢–ê–¢–¨:\n"
                for m in verification['mistakes']:
                    result_text += f"‚Ä¢ {m}\n"
            
            if not verification['correct']:
                result_text += f"\n‚úèÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {verification['final_answer']}"
            
            keyboard = [
                [InlineKeyboardButton("üìö –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="start_solving")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            session.state = SessionState.COMPLETED
            
            await update.message.reply_text(result_text, reply_markup=reply_markup)
            
            if session.meme_enabled:
                session.stats["total_memes_earned"] = session.stats.get("total_memes_earned", 0) + 1

                await update.message.chat.send_action("typing")
                await asyncio.sleep(1)

                meme_emoji = "üéØ" if new_score >= 80 else "üôÇ" if new_score >= 60 else "üò¢"
                if meme_text:
                    await update.message.reply_text(f"{meme_emoji} {meme_text}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            session.current_task = None
            session.conversation = []
            session.task_start_time = None
            session.state = SessionState.WAITING_TASK
            
    except Exception as e:
        error_text = f"""–û—à–∏–±–∫–∞ –≤ handle_message:

**–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:** {str(e)}

**User ID:** {update.effective_user.id}
**Username:** @{update.effective_user.username if update.effective_user.username else 'No username'}
**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {update.message.text if update.message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}

**–¢—Ä–µ–π—Å–±–µ–∫:**
```
{traceback.format_exc()}
```"""
        
        report_error(error_text)
        
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –Ø —É–∂–µ —Å–æ–æ–±—â–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!"
        )


def build_statistics_text(session: UserSession) -> str:
    stats = session.stats

    if stats["total_tasks"] == 0:
        return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n\n–†–µ—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"

    success_rate = (stats["completed_tasks"] / stats["total_tasks"] * 100) if stats["total_tasks"] else 0

    text = (
        "üìä –¢–í–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {stats['completed_tasks']}/{stats['total_tasks']}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']:.1f}/100\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {stats['total_hints']}\n"
        f"üé≠ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ–º–æ–≤: {stats.get('total_memes_earned', 0)}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n"
        "üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
    )

    if stats["tasks_history"]:
        for task in stats["tasks_history"][-5:]:
            emoji = "‚úÖ" if task["score"] >= 70 else "‚ö†Ô∏è" if task["score"] >= 50 else "‚ùå"
            text += f"\n{emoji} {task['date']}: {task['score']}/100"
    else:
        text += "\n‚Äî –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"

    return text


async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    session.state = SessionState.WAITING_TASK
    session.current_task = None
    session.conversation = []
    session.task_start_time = None

    await update.message.reply_text(
        "üîÑ –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ —Ñ–æ—Ç–æ."
    )


async def submit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)

    if session.state != SessionState.SOLVING:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞—á—É –∏ –Ω–∞—á–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ.")
        return

    session.state = SessionState.FINAL_ANSWER
    await update.message.reply_text(
        "‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –Ω–∞ –∑–∞–¥–∞—á—É.\n\n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è."
    )


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    text = build_statistics_text(session)
    await update.message.reply_text(text)


async def hint_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)

    if session.state != SessionState.SOLVING:
        await update.message.reply_text("–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")
        return

    session.stats["total_hints"] += 1
    session.conversation.append({
        "role": "user",
        "content": "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞. –î–∞–π –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–æ –Ω–µ —Ä–µ—à–µ–Ω–∏–µ."
    })

    await update.message.chat.send_action("typing")
    response = await get_ai_response(session, SYSTEM_PROMPT)
    await update.message.reply_text(f"üí° {response}")


async def call_claude(messages, system_prompt: str, max_tokens: int = 600) -> str:
    if not client:
        raise RuntimeError("Anthropic client is not configured")

    def _request():
        response = client.messages.create(
            model=DEFAULT_MODEL,
            system=system_prompt,
            messages=messages,
            max_tokens=max_tokens,
        )

        parts = []
        for block in getattr(response, "content", []) or []:
            text = getattr(block, "text", None)
            if text is not None:
                parts.append(text)
            elif isinstance(block, dict) and block.get("type") == "text":
                parts.append(block.get("text", ""))
        return "\n".join(parts).strip()

    return await asyncio.to_thread(_request)


async def get_ai_response(session: UserSession, system_prompt: str) -> str:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç Anthropic
    messages = []
    for turn in session.conversation:
        messages.append({
            "role": turn["role"],
            "content": [{"type": "text", "text": turn["content"]}]
        })

    try:
        if client:
            reply = await call_claude(messages, system_prompt)
        else:
            raise RuntimeError("Anthropic client unavailable")
    except Exception:
        # –§–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –±–µ–∑ LLM
        reply = (
            "–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Ä–µ—à–µ–Ω–∏—è."
            if session.state == SessionState.SOLVING
            else "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –∑–∞–¥–∞—á–µ."
        )

    session.conversation.append({"role": "assistant", "content": reply})
    return reply


async def verify_solution(task_text: str, student_answer: str) -> dict:
    prompt = VERIFICATION_PROMPT.format(
        original_task=task_text,
        student_answer=student_answer
    )

    if client:
        messages = [{
            "role": "user",
            "content": [{"type": "text", "text": prompt}]
        }]
        try:
            response = await call_claude(messages, "–¢—ã —Å—Ç—Ä–æ–≥–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π.")
            data = json.loads(response)
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            return {
                "correct": bool(data.get("correct", False)),
                "final_answer": data.get("final_answer", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"),
                "score": int(data.get("score", 0)),
                "feedback": data.get("feedback", "–ù–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"),
                "mistakes": data.get("mistakes", []),
                "strengths": data.get("strengths", []),
            }
        except Exception:
            pass

    # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    return {
        "correct": False,
        "final_answer": "–Ω/–¥",
        "score": 50,
        "feedback": (
            "–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            " –ü–æ–ø—Ä–æ–±—É–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        ),
        "mistakes": ["–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ"],
        "strengths": [],
    }


async def generate_meme_text(score: int, task_text: str, difficulty: str) -> str:
    if client:
        prompt = MEME_GENERATION_PROMPT.format(
            score=score,
            task_type="—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞" if len(task_text) > 40 else "–±—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–º–µ—Ä",
            difficulty=difficulty,
        )
        messages = [{
            "role": "user",
            "content": [{"type": "text", "text": prompt}]
        }]
        try:
            return await call_claude(messages, "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –º–µ–º.")
        except Exception:
            pass

    # –§–æ–ª–±—ç–∫ –±–µ–∑ LLM
    if score >= 80:
        return "Gigachad –º–æ–º–µ–Ω—Ç! –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Å–∞–º–∞ —Ä–µ—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç—ã —Ä—è–¥–æ–º."
    if score >= 60:
        return "W-–ø–æ–±–µ–¥–∞! –ï—â–µ –ø–∞—Ä—É —à–∞–≥–æ–≤ ‚Äî –∏ —Å—Ç–∞–Ω–µ—à—å –ª–µ–≥–µ–Ω–¥–æ–π –∞–ª–≥–µ–±—Ä—ã."
    if score >= 40:
        return "–ú—ã —ç—Ç–æ –∑–∞—Å—á–∏—Ç–∞–µ–º. –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã —Ç–æ–∂–µ —Å—á–∏—Ç–∞—é—Ç—Å—è!"
    return "–≠—Ç–æ –Ω–µ –ø—Ä–æ–≤–∞–ª, —ç—Ç–æ –º–æ–Ω—Ç–∞–∂ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ —Ä–∞–∑–Ω–µ—Å–µ—à—å!"


def register_handlers(application: Application) -> None:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(CommandHandler("submit", submit_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("hint", hint_command))
    application.add_handler(CommandHandler("keyboard", keyboard_command))

    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


def create_application() -> Application:
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is not configured")

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    register_handlers(application)
    return application


def main():
    application = create_application()
    application.run_polling()


if __name__ == "__main__":
    main()
